#!/bin/bash
#--------------------------------------------------
# This script is used for: 
# 1. to download and import smartide images
# @author:   jilibin
# @usage:    ./sedown
#--------------------------------------------------
version=v1.0.0
echo "version:$version"
set -o nounset
set -o errexit
#set -o xtrace

# Docker Registry
smartideDockerhub=registry.cn-hangzhou.aliyuncs.com/smartide
dockerRegistry=easzlab.io.local:5000

# smartide tekton image
tektonPipelineVer=v0.32.0
tektonTriggersVer=v0.18.0
tektonDashboardVer=v0.23.0
# smartide server image
smartideServerVer=6904
smartideCliVer=6904



function usage() {
  echo -e "\033[33mUsage:\033[0m sedown [options] [args]"
  cat <<EOF
  option:
    -D         download tekton && server images into "$BASE/down/smartide"
    -K         deploy tekton && server on k8s
EOF
}

function logger() {
  TIMESTAMP=$(date +'%Y-%m-%d %H:%M:%S')
  case "$1" in
    debug)
      echo -e "$TIMESTAMP \033[36mDEBUG\033[0m $2"
      ;;
    info)
      echo -e "$TIMESTAMP \033[32mINFO\033[0m $2"
      ;;
    warn)
      echo -e "$TIMESTAMP \033[33mWARN\033[0m $2"
      ;;
    error)
      echo -e "$TIMESTAMP \033[31mERROR\033[0m $2"
      ;;
    *)
      ;;
  esac
}

function get_smartide_tekton_images() {
  logger info "download smartide tekton images, then upload to the local registry"
  mkdir -p "$BASE/down"

  # tekton-pipeline
  if [[ ! -f "$imageDir/tekton-pipeline_$tektonPipelineVer.tar" ]];then
    docker pull "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-controller:$tektonPipelineVer" && \
    docker pull "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-entrypoint:$tektonPipelineVer" && \
    docker pull "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-webhook:$tektonPipelineVer" && \
    docker pull "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-kubeconfigwriter:$tektonPipelineVer" && \
    docker pull "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-git-init:$tektonPipelineVer" && \
    docker pull "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-nop:$tektonPipelineVer" && \
    docker pull "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-imagedigestexporter:$tektonPipelineVer" && \
    docker pull "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-pullrequest-init:$tektonPipelineVer" && \
    docker pull "$smartideDockerhub/cloudsdktool-cloud-sdk" && \
    docker pull "$smartideDockerhub/distroless-base" && \
    docker save -o "$imageDir/tekton-pipeline_$tektonPipelineVer.tar" \
      "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-controller:$tektonPipelineVer" \
      "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-entrypoint:$tektonPipelineVer" \
      "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-webhook:$tektonPipelineVer" \
      "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-kubeconfigwriter:$tektonPipelineVer" \
      "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-git-init:$tektonPipelineVer" \
      "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-nop:$tektonPipelineVer" \
      "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-imagedigestexporter:$tektonPipelineVer" \
      "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-pullrequest-init:$tektonPipelineVer" \
      "$smartideDockerhub/cloudsdktool-cloud-sdk" \
      "$smartideDockerhub/distroless-base"
  else
    docker load -i "$imageDir/tekton-pipeline_$tektonPipelineVer.tar"
  fi
  docker tag "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-controller:$tektonPipelineVer" "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-controller:$tektonPipelineVer"
  docker push "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-controller:$tektonPipelineVer"
  docker tag "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-entrypoint:$tektonPipelineVer" "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-entrypoint:$tektonPipelineVer"
  docker push "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-entrypoint:$tektonPipelineVer"
  docker tag "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-webhook:$tektonPipelineVer" "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-webhook:$tektonPipelineVer"
  docker push "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-webhook:$tektonPipelineVer"
  docker tag "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-kubeconfigwriter:$tektonPipelineVer" "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-kubeconfigwriter:$tektonPipelineVer"
  docker push "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-kubeconfigwriter:$tektonPipelineVer"
  docker tag "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-git-init:$tektonPipelineVer" "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-git-init:$tektonPipelineVer"
  docker push "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-git-init:$tektonPipelineVer"
  docker tag "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-nop:$tektonPipelineVer" "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-nop:$tektonPipelineVer"
  docker push "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-nop:$tektonPipelineVer"
  docker tag "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-imagedigestexporter:$tektonPipelineVer" "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-imagedigestexporter:$tektonPipelineVer"
  docker push "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-imagedigestexporter:$tektonPipelineVer"
  docker tag "$smartideDockerhub/tekton-releases-tektoncd-pipeline-cmd-pullrequest-init:$tektonPipelineVer" "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-pullrequest-init:$tektonPipelineVer"
  docker push "$dockerRegistry/smartide/tekton-releases-tektoncd-pipeline-cmd-pullrequest-init:$tektonPipelineVer"
  docker tag "$smartideDockerhub/cloudsdktool-cloud-sdk" "$dockerRegistry/smartide/cloudsdktool-cloud-sdk"
  docker push "$dockerRegistry/smartide/cloudsdktool-cloud-sdk"
  docker tag "$smartideDockerhub/distroless-base" "$dockerRegistry/smartide/distroless-base"
  docker push "$dockerRegistry/smartide/distroless-base"


  # tekton-triggers
  if [[ ! -f "$imageDir/triggers_$tektonTriggersVer.tar" ]];then
    docker pull "$smartideDockerhub/tekton-releases-tektoncd-triggers-cmd-controller:$tektonTriggersVer" && \
    docker pull "$smartideDockerhub/tekton-releases-tektoncd-triggers-cmd-eventlistenersink:$tektonTriggersVer" && \
    docker pull "$smartideDockerhub/tekton-releases-tektoncd-triggers-cmd-interceptors:$tektonTriggersVer" && \
    docker pull "$smartideDockerhub/tekton-releases-tektoncd-triggers-cmd-webhook:$tektonTriggersVer" && \
    docker save -o "$imageDir/tekton-triggers_$tektonTriggersVer.tar" \
      "$smartideDockerhub/tekton-releases-tektoncd-triggers-cmd-controller:$tektonTriggersVer" \
      "$smartideDockerhub/tekton-releases-tektoncd-triggers-cmd-eventlistenersink:$tektonTriggersVer" \
      "$smartideDockerhub/tekton-releases-tektoncd-triggers-cmd-interceptors:$tektonTriggersVer" \
      "$smartideDockerhub/tekton-releases-tektoncd-triggers-cmd-webhook:$tektonTriggersVer"
  else
    docker load -i "$imageDir/tekton-triggers_$tektonTriggersVer.tar"
  fi
  docker tag "$smartideDockerhub/tekton-releases-tektoncd-triggers-cmd-controller:$tektonTriggersVer" "$dockerRegistry/smartide/tekton-releases-tektoncd-triggers-cmd-controller:$tektonTriggersVer"
  docker push "$dockerRegistry/smartide/tekton-releases-tektoncd-triggers-cmd-controller:$tektonTriggersVer"
  docker tag "$smartideDockerhub/tekton-releases-tektoncd-triggers-cmd-eventlistenersink:$tektonTriggersVer" "$dockerRegistry/smartide/tekton-releases-tektoncd-triggers-cmd-eventlistenersink:$tektonTriggersVer"
  docker push "$dockerRegistry/smartide/tekton-releases-tektoncd-triggers-cmd-eventlistenersink:$tektonTriggersVer"
  docker tag "$smartideDockerhub/tekton-releases-tektoncd-triggers-cmd-interceptors:$tektonTriggersVer" "$dockerRegistry/smartide/tekton-releases-tektoncd-triggers-cmd-interceptors:$tektonTriggersVer"
  docker push "$dockerRegistry/smartide/tekton-releases-tektoncd-triggers-cmd-interceptors:$tektonTriggersVer"
  docker tag "$smartideDockerhub/tekton-releases-tektoncd-triggers-cmd-webhook:$tektonTriggersVer" "$dockerRegistry/smartide/tekton-releases-tektoncd-triggers-cmd-webhook:$tektonTriggersVer"
  docker push "$dockerRegistry/smartide/tekton-releases-tektoncd-triggers-cmd-webhook:$tektonTriggersVer"

  # tekton-dashboard
  if [[ ! -f "$imageDir/tekton-dashboard_$tektonDashboardVer.tar" ]];then
    docker pull "$smartideDockerhub/tekton-releases-tektoncd-dashboard-cmd-dashboard:$tektonDashboardVer" && \
    docker save -o "$imageDir/tekton-dashboard_$tektonDashboardVer.tar" \
      "$smartideDockerhub/tekton-releases-tektoncd-dashboard-cmd-dashboard:$tektonDashboardVer"
  else
    docker load -i "$imageDir/tekton-dashboard_$tektonDashboardVer.tar"
  fi
  docker tag "$smartideDockerhub/tekton-releases-tektoncd-dashboard-cmd-dashboard:$tektonDashboardVer" "$dockerRegistry/smartide/tekton-releases-tektoncd-dashboard-cmd-dashboard:$tektonDashboardVer"
  docker push "$dockerRegistry/smartide/tekton-releases-tektoncd-dashboard-cmd-dashboard:$tektonDashboardVer"
}

function get_smartide_tekton_manifests() {
  logger info "download smartide tekton manifests"
  if [[ ! -d "$BASE/manifests/smartide-tekton-deployment" ]];then
    mkdir -p "$BASE/manifests/smartide-tekton-deployment"
    tektonManifestsPath="$BASE/manifests/smartide-tekton-deployment"
    wget -P $tektonManifestsPath/pipeline/v0.32.0 \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/pipeline/v0.32.0/smartide-tekton-release.yaml
    wget -P $tektonManifestsPath/dashboard/v0.32.0 \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/dashboard/v0.32.0/smartide-tekton-dashboard-release.yaml
    wget -P $tektonManifestsPath/trigger/v0.18.0 \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/trigger/v0.18.0/smartide-release.yaml
    wget -P $tektonManifestsPath/trigger/v0.18.0 \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/trigger/v0.18.0/smartide-interceptor.yaml
    wget -P $tektonManifestsPath/smartide-pipeline/aliyun \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/smartide-pipeline/aliyun/trigger.yaml
    wget -P $tektonManifestsPath/smartide-pipeline/aliyun \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/smartide-pipeline/aliyun/trigger-template.yaml
    wget -P $tektonManifestsPath/smartide-pipeline/aliyun \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/smartide-pipeline/aliyun/trigger-binding.yaml
    wget -P $tektonManifestsPath/smartide-pipeline/aliyun \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/smartide-pipeline/aliyun/trigger-event-listener.yaml
    wget -P $tektonManifestsPath/smartide-pipeline/aliyun \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/smartide-pipeline/aliyun/task-smartide-cli-release.yaml
    wget -P $tektonManifestsPath/smartide-pipeline/aliyun \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/smartide-pipeline/aliyun/pipeline-smartide-cli.yaml
    wget -P $tektonManifestsPath \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/smartide-tekton-deployment.sh
  else
    logger info "smartide tekton manifests are already exists"
  fi
}

function deploy_smartide_tekton() {
  logger info "deploy smartide tekton manifests"
  if [[ ! -d "$BASE/manifests/smartide-tekton-deployment" ]];then
    logger error "smartide tekton manifests are not exists"
  else
    tektonManifestsPath="$BASE/manifests/smartide-tekton-deployment"
    sed -i "s#easzlab.io.local:5000#$dockerRegistry#g" `grep easzlab.io.local:5000 -rl $tektonManifestsPath`
    kubectl apply -f $tektonManifestsPath/pipeline/v0.32.0/smartide-tekton-release.yaml
    kubectl apply -f $tektonManifestsPath/dashboard/v0.32.0/smartide-tekton-dashboard-release.yaml
    sleep 15
    kubectl apply -f $tektonManifestsPath/trigger/v0.18.0/smartide-release.yaml
    kubectl apply -f $tektonManifestsPath/trigger/v0.18.0/smartide-interceptor.yaml
    sleep 5
    kubectl apply -f $tektonManifestsPath/smartide-pipeline/aliyun/trigger.yaml
    kubectl apply -f $tektonManifestsPath/smartide-pipeline/aliyun/trigger-template.yaml
    kubectl apply -f $tektonManifestsPath/smartide-pipeline/aliyun/trigger-binding.yaml
    kubectl apply -f $tektonManifestsPath/smartide-pipeline/aliyun/trigger-event-listener.yaml
    sleep 5
    kubectl apply -f $tektonManifestsPath/smartide-pipeline/aliyun/task-smartide-cli-release.yaml
    kubectl apply -f $tektonManifestsPath/smartide-pipeline/aliyun/pipeline-smartide-cli.yaml
  fi
}

function get_smartide_server_images() {
  mkdir -p "$BASE/down"
  # server
  logger info "download smartide server images, then upload to the local registry"
  if [[ ! -f "$imageDir/smartide-server_$smartideServerVer.tar" ]];then
    docker pull "$smartideDockerhub/smartide-api:$smartideServerVer" && \
    docker pull "$smartideDockerhub/smartide-web:$smartideServerVer" && \
    docker save -o "$imageDir/smartide-server_$smartideServerVer.tar" \
      "$smartideDockerhub/smartide-api:$smartideServerVer" \
      "$smartideDockerhub/smartide-web:$smartideServerVer"
  else
    docker load -i "$imageDir/smartide-server_$smartideServerVer.tar"
  fi
  docker tag "$smartideDockerhub/smartide-api:$smartideServerVer" "$dockerRegistry/smartide/smartide-api:$smartideServerVer"
  docker push "$dockerRegistry/smartide/smartide-api:$smartideServerVer"
  docker tag "$smartideDockerhub/smartide-web:$smartideServerVer" "$dockerRegistry/smartide/smartide-web:$smartideServerVer"
  docker push "$dockerRegistry/smartide/smartide-web:$smartideServerVer"
  
  # server dependencies: phpmyadmin，mysql，busybox，redis
  logger info "download smartide server dependencies images, then upload to the local registry"
  if [[ ! -f "$imageDir/smartide-server-dependencies.tar" ]];then
    docker pull "$smartideDockerhub/phpmyadmin:5.1.1" && \
    docker pull "$smartideDockerhub/mysql:8.0.29" && \
    docker pull "$smartideDockerhub/busybox:1.29.3" && \
    docker pull "$smartideDockerhub/redis:6.0.16" && \
    docker save -o "$imageDir/smartide-server-dependencies.tar" \
      "$smartideDockerhub/phpmyadmin:5.1.1" \
      "$smartideDockerhub/mysql:8.0.29" \
      "$smartideDockerhub/busybox:1.29.3" \
      "$smartideDockerhub/redis:6.0.16"
  else
    docker load -i "$imageDir/smartide-server-dependencies.tar"
  fi
  docker tag "$smartideDockerhub/phpmyadmin:5.1.1" "$dockerRegistry/smartide/phpmyadmin:5.1.1"
  docker push "$dockerRegistry/smartide/phpmyadmin:5.1.1"
  docker tag "$smartideDockerhub/mysql:8.0.29" "$dockerRegistry/smartide/mysql:8.0.29"
  docker push "$dockerRegistry/smartide/mysql:8.0.29"
  docker tag "$smartideDockerhub/busybox:1.29.3" "$dockerRegistry/smartide/busybox:1.29.3"
  docker push "$dockerRegistry/smartide/busybox:1.29.3"
  docker tag "$smartideDockerhub/redis:6.0.16" "$dockerRegistry/smartide/redis:6.0.16"
  docker push "$dockerRegistry/smartide/redis:6.0.16"
}

function get_smartide_server_manifests() {
  logger info "download smartide server manifests"
  if [[ ! -d "$BASE/manifests/smartide-server-deployment" ]];then
    mkdir -p "$BASE/manifests/smartide-server-deployment/k8s"
    serverManifestsPath="$BASE/manifests/smartide-server-deployment"
    wget -P $serverManifestsPath/k8s/ \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-server-deployment/k8s/gva-server-configmap.yaml
    wget -P $serverManifestsPath/k8s/ \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-server-deployment/k8s/gva-server-deployment.yaml
    sed -i "s/{smartideServerVer}/$smartideServerVer/g" $serverManifestsPath/k8s/gva-server-deployment.yaml
    wget -P $serverManifestsPath/k8s/ \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-server-deployment/k8s/gva-web-configmap.yaml
    wget -P $serverManifestsPath/k8s/ \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-server-deployment/k8s/gva-web-deploymemt.yaml
    sed -i "s/{smartideServerVer}/$smartideServerVer/g" $serverManifestsPath/k8s/gva-web-deploymemt.yaml
    wget -P $serverManifestsPath/k8s/ \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-server-deployment/k8s/myadmin-deployment.yaml
    wget -P $serverManifestsPath/k8s/ \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-server-deployment/k8s/mysql-deployment.yaml
    wget -P $serverManifestsPath/k8s/ \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-server-deployment/k8s/redis-deployment.yaml
    wget -P $serverManifestsPath \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/smartide-tekton-deployment.sh
  else
    logger info "smartide server manifests are already exists:$BASE/manifests/smartide-server-deployment"
  fi
}

function deploy_smartide_server() {
  logger info "deploy smartide server manifests"
  if [[ ! -d "$BASE/manifests/smartide-server-deployment" ]];then
    logger error "smartide server manifests are not exists"
  else
    serverManifestsPath="$BASE/manifests/smartide-server-deployment"
    sed -i "s#easzlab.io.local:5000#$dockerRegistry#g" `grep easzlab.io.local:5000 -rl $serverManifestsPath`
    kubectl apply -f $serverManifestsPath/k8s/gva-server-configmap.yaml
    kubectl apply -f $serverManifestsPath/k8s/gva-server-deployment.yaml
    kubectl apply -f $serverManifestsPath/k8s/gva-web-configmap.yaml
    kubectl apply -f $serverManifestsPath/k8s/gva-web-deploymemt.yaml
    kubectl apply -f $serverManifestsPath/k8s/myadmin-deployment.yaml
    kubectl apply -f $serverManifestsPath/k8s/mysql-deployment.yaml
    kubectl apply -f $serverManifestsPath/k8s/redis-deployment.yaml
  fi
}

function get_smartide_sedown() {
  logger info "download smartide sedown"
  if [[ ! -f "$BASE/sedown" ]];then
    wget -P "$BASE" \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/sedown
  else
    logger info "smartide sedown are already exists"
  fi
}

function download_all() {
  get_smartide_sedown && \
  get_smartide_tekton_images && \
  get_smartide_tekton_manifests && \
  get_smartide_server_images && \
  get_smartide_server_manifests
}

function deploy_all() {
  deploy_smartide_tekton && \
  deploy_smartide_server
}

### Main Lines ##################################################
function main() {
  BASE="/etc/smartide"
  imageDir="$BASE/down"

  # check if use bash shell
  readlink /proc/$$/exe|grep -q "bash" || { logger error "you should use bash shell, not sh"; exit 1; }
  # check if use with root
  [[ "$EUID" -ne 0 ]] && { logger error "you should run this script as root"; exit 1; }
  
  [[ "$#" -eq 0 ]] && { usage >&2; exit 1; }
  
  ACTION=""
  while getopts "D" OPTION; do
      case "$OPTION" in
        D)
          ACTION="download_all"
          ;;
        K)
          ACTION="deploy_all"
          ;;        
        ?)
          usage
          exit 1
          ;;
      esac
  done
  
  [[ "$ACTION" == "" ]] && { logger error "illegal option"; usage; exit 1; }
  
  # excute cmd "$ACTION" 
  logger info "Action begin: $ACTION"
  ${ACTION} || { logger error "Action failed: $ACTION"; return 1; }
  logger info "Action successed: $ACTION"
}

main "$@"
