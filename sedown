#!/bin/bash
#--------------------------------------------------
# This script is used for: 
# 1. to download and import smartide images
# @author:   jilibin
# @usage:    ./sedown
#--------------------------------------------------
version=v1.0.4
echo "version:$version"
set -o nounset
set -o errexit
#set -o xtrace

# Docker Registry
smartideDockerhub=registry.cn-hangzhou.aliyuncs.com
smartideDockerNamespace=smartide
smartideDockerURL=$smartideDockerhub/$smartideDockerNamespace
dockerRegistry=smartide.io.local:5000
dockerNamespace=smartide
dockerURL=$dockerRegistry/$dockerNamespace
dockerName=
dockerPwd=

# smartide tekton image
tektonPipelineVer=v0.32.0
tektonTriggersVer=v0.18.0
tektonDashboardVer=v0.23.0

# smartide server image
smartideServerVer=7273
smartideCliVer=7251

# smartide web config
webSSL=false   #false/true

# smartide server config
dbPassword=SmartIDE@123
apiHost=http://192.168.1.1
tektonTriggerHost=http://192.168.1.1/tekton-trigger
hybridDownloadUrl=http://smartidedl.blob.core.chinacloudapi.cn
templateGitUrl=https://gitee.com/smartide/smartide-templates.git
assetsUrl=https://smartidedl.blob.core.chinacloudapi.cn/assets
oemEnable=false
title=SmartIDE
docUrl=https://smartide.cn
cliVersion=2222

function usage() {
  echo -e "\033[33mUsage:\033[0m sedown [options] [args]"
  cat <<EOF
  option:
    -D         download tekton && server images into "$BASE/down/smartide"
    -B         build tekton && server manifest before deploy
    -K         deploy smartide tekton && server on k8s
EOF
}

function logger() {
  TIMESTAMP=$(date +'%Y-%m-%d %H:%M:%S')
  case "$1" in
    debug)
      echo -e "$TIMESTAMP \033[36mDEBUG\033[0m $2"
      ;;
    info)
      echo -e "$TIMESTAMP \033[32mINFO\033[0m $2"
      ;;
    warn)
      echo -e "$TIMESTAMP \033[33mWARN\033[0m $2"
      ;;
    error)
      echo -e "$TIMESTAMP \033[31mERROR\033[0m $2"
      ;;
    *)
      ;;
  esac
}

function download_all() {
  mkdir -p "$BASE/down"
  get_smartide_sedown && \
  get_registry && \
  get_smartide_tekton_images && \
  get_smartide_server_images

  mkdir -p "$BASE/manifests"
  get_smartide_tekton_manifests && \
  get_smartide_server_manifests
}

function get_smartide_sedown() {
  logger info "download smartide sedown"
  if [[ ! -f "$BASE/sedown" ]];then
    wget -P "$BASE" \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/sedown
  else
    logger info "smartide sedown are already exists"
  fi
}

function get_smartide_tekton_images() {
  logger info "download smartide tekton images, then upload to the local registry"

  # tekton-pipeline
  if [[ ! -f "$imageDir/tekton-pipeline_$tektonPipelineVer.tar" ]];then
    docker pull "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-controller:$tektonPipelineVer" && \
    docker pull "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-entrypoint:$tektonPipelineVer" && \
    docker pull "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-webhook:$tektonPipelineVer" && \
    docker pull "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-kubeconfigwriter:$tektonPipelineVer" && \
    docker pull "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-git-init:$tektonPipelineVer" && \
    docker pull "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-nop:$tektonPipelineVer" && \
    docker pull "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-imagedigestexporter:$tektonPipelineVer" && \
    docker pull "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-pullrequest-init:$tektonPipelineVer" && \
    docker pull "$smartideDockerURL/cloudsdktool-cloud-sdk" && \
    docker pull "$smartideDockerURL/distroless-base" && \
    docker save -o "$imageDir/tekton-pipeline_$tektonPipelineVer.tar" \
      "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-controller:$tektonPipelineVer" \
      "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-entrypoint:$tektonPipelineVer" \
      "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-webhook:$tektonPipelineVer" \
      "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-kubeconfigwriter:$tektonPipelineVer" \
      "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-git-init:$tektonPipelineVer" \
      "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-nop:$tektonPipelineVer" \
      "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-imagedigestexporter:$tektonPipelineVer" \
      "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-pullrequest-init:$tektonPipelineVer" \
      "$smartideDockerURL/cloudsdktool-cloud-sdk" \
      "$smartideDockerURL/distroless-base"
  else
    docker load -i "$imageDir/tekton-pipeline_$tektonPipelineVer.tar"
    docker tag "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-controller:$tektonPipelineVer" "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-controller:$tektonPipelineVer"
    docker push "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-controller:$tektonPipelineVer"
    docker tag "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-entrypoint:$tektonPipelineVer" "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-entrypoint:$tektonPipelineVer"
    docker push "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-entrypoint:$tektonPipelineVer"
    docker tag "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-webhook:$tektonPipelineVer" "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-webhook:$tektonPipelineVer"
    docker push "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-webhook:$tektonPipelineVer"
    docker tag "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-kubeconfigwriter:$tektonPipelineVer" "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-kubeconfigwriter:$tektonPipelineVer"
    docker push "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-kubeconfigwriter:$tektonPipelineVer"
    docker tag "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-git-init:$tektonPipelineVer" "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-git-init:$tektonPipelineVer"
    docker push "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-git-init:$tektonPipelineVer"
    docker tag "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-nop:$tektonPipelineVer" "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-nop:$tektonPipelineVer"
    docker push "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-nop:$tektonPipelineVer"
    docker tag "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-imagedigestexporter:$tektonPipelineVer" "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-imagedigestexporter:$tektonPipelineVer"
    docker push "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-imagedigestexporter:$tektonPipelineVer"
    docker tag "$smartideDockerURL/tekton-releases-tektoncd-pipeline-cmd-pullrequest-init:$tektonPipelineVer" "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-pullrequest-init:$tektonPipelineVer"
    docker push "$dockerURL/tekton-releases-tektoncd-pipeline-cmd-pullrequest-init:$tektonPipelineVer"
    docker tag "$smartideDockerURL/cloudsdktool-cloud-sdk" "$dockerURL/cloudsdktool-cloud-sdk"
    docker push "$dockerURL/cloudsdktool-cloud-sdk"
    docker tag "$smartideDockerURL/distroless-base" "$dockerURL/distroless-base"
    docker push "$dockerURL/distroless-base"
  fi



  # tekton-triggers
  if [[ ! -f "$imageDir/triggers_$tektonTriggersVer.tar" ]];then
    docker pull "$smartideDockerURL/tekton-releases-tektoncd-triggers-cmd-controller:$tektonTriggersVer" && \
    docker pull "$smartideDockerURL/tekton-releases-tektoncd-triggers-cmd-eventlistenersink:$tektonTriggersVer" && \
    docker pull "$smartideDockerURL/tekton-releases-tektoncd-triggers-cmd-interceptors:$tektonTriggersVer" && \
    docker pull "$smartideDockerURL/tekton-releases-tektoncd-triggers-cmd-webhook:$tektonTriggersVer" && \
    docker save -o "$imageDir/tekton-triggers_$tektonTriggersVer.tar" \
      "$smartideDockerURL/tekton-releases-tektoncd-triggers-cmd-controller:$tektonTriggersVer" \
      "$smartideDockerURL/tekton-releases-tektoncd-triggers-cmd-eventlistenersink:$tektonTriggersVer" \
      "$smartideDockerURL/tekton-releases-tektoncd-triggers-cmd-interceptors:$tektonTriggersVer" \
      "$smartideDockerURL/tekton-releases-tektoncd-triggers-cmd-webhook:$tektonTriggersVer"
  else
    docker load -i "$imageDir/tekton-triggers_$tektonTriggersVer.tar"
    docker tag "$smartideDockerURL/tekton-releases-tektoncd-triggers-cmd-controller:$tektonTriggersVer" "$dockerURL/tekton-releases-tektoncd-triggers-cmd-controller:$tektonTriggersVer"
    docker push "$dockerURL/tekton-releases-tektoncd-triggers-cmd-controller:$tektonTriggersVer"
    docker tag "$smartideDockerURL/tekton-releases-tektoncd-triggers-cmd-eventlistenersink:$tektonTriggersVer" "$dockerURL/tekton-releases-tektoncd-triggers-cmd-eventlistenersink:$tektonTriggersVer"
    docker push "$dockerURL/tekton-releases-tektoncd-triggers-cmd-eventlistenersink:$tektonTriggersVer"
    docker tag "$smartideDockerURL/tekton-releases-tektoncd-triggers-cmd-interceptors:$tektonTriggersVer" "$dockerURL/tekton-releases-tektoncd-triggers-cmd-interceptors:$tektonTriggersVer"
    docker push "$dockerURL/tekton-releases-tektoncd-triggers-cmd-interceptors:$tektonTriggersVer"
    docker tag "$smartideDockerURL/tekton-releases-tektoncd-triggers-cmd-webhook:$tektonTriggersVer" "$dockerURL/tekton-releases-tektoncd-triggers-cmd-webhook:$tektonTriggersVer"
    docker push "$dockerURL/tekton-releases-tektoncd-triggers-cmd-webhook:$tektonTriggersVer"
  fi


  # tekton-dashboard
  if [[ ! -f "$imageDir/tekton-dashboard_$tektonDashboardVer.tar" ]];then
    docker pull "$smartideDockerURL/tekton-releases-tektoncd-dashboard-cmd-dashboard:$tektonDashboardVer" && \
    docker save -o "$imageDir/tekton-dashboard_$tektonDashboardVer.tar" \
      "$smartideDockerURL/tekton-releases-tektoncd-dashboard-cmd-dashboard:$tektonDashboardVer"
  else
    docker load -i "$imageDir/tekton-dashboard_$tektonDashboardVer.tar"
    docker tag "$smartideDockerURL/tekton-releases-tektoncd-dashboard-cmd-dashboard:$tektonDashboardVer" "$dockerURL/tekton-releases-tektoncd-dashboard-cmd-dashboard:$tektonDashboardVer"
    docker push "$dockerURL/tekton-releases-tektoncd-dashboard-cmd-dashboard:$tektonDashboardVer"
  fi

}

function get_smartide_server_images() {
  mkdir -p "$BASE/down"
  # server
  logger info "download smartide server images, then upload to the local registry"
  if [[ ! -f "$imageDir/smartide-server_$smartideServerVer.tar" ]];then
    docker pull "$smartideDockerURL/smartide-api:$smartideServerVer" && \
    docker pull "$smartideDockerURL/smartide-web:$smartideServerVer" && \
    docker save -o "$imageDir/smartide-server_$smartideServerVer.tar" \
      "$smartideDockerURL/smartide-api:$smartideServerVer" \
      "$smartideDockerURL/smartide-web:$smartideServerVer"
  else
    docker load -i "$imageDir/smartide-server_$smartideServerVer.tar"
    docker tag "$smartideDockerURL/smartide-api:$smartideServerVer" "$dockerURL/smartide-api:$smartideServerVer"
    docker push "$dockerURL/smartide-api:$smartideServerVer"
    docker tag "$smartideDockerURL/smartide-web:$smartideServerVer" "$dockerURL/smartide-web:$smartideServerVer"
    docker push "$dockerURL/smartide-web:$smartideServerVer"
  fi

  # cli
  logger info "download smartide server images, then upload to the local registry"
  if [[ ! -f "$imageDir/smartide-cli_$smartideCliVer.tar" ]];then
    docker pull "$smartideDockerURL/smartide-cli:$smartideCliVer" && \
    docker save -o "$imageDir/smartide-cli$smartideServerVer.tar" \
      "$smartideDockerURL/smartide-cli:$smartideCliVer"
  else
    docker tag "$smartideDockerURL/smartide-cli:$smartideCliVer" "$dockerURL/smartide-cli:$smartideCliVer"
    docker push "$dockerURL/smartide-cli:$smartideCliVer"
  fi

  
  # server dependencies: phpmyadmin，mysql，busybox，redis
  logger info "download smartide server dependencies images, then upload to the local registry"
  if [[ ! -f "$imageDir/smartide-server-dependencies.tar" ]];then
    docker pull "$smartideDockerURL/phpmyadmin:5.1.1" && \
    docker pull "$smartideDockerURL/mysql:8.0.29" && \
    docker pull "$smartideDockerURL/busybox:1.29.3" && \
    docker pull "$smartideDockerURL/redis:6.0.16" && \
    docker save -o "$imageDir/smartide-server-dependencies.tar" \
      "$smartideDockerURL/phpmyadmin:5.1.1" \
      "$smartideDockerURL/mysql:8.0.29" \
      "$smartideDockerURL/busybox:1.29.3" \
      "$smartideDockerURL/redis:6.0.16"
  else
    docker load -i "$imageDir/smartide-server-dependencies.tar"
    docker tag "$smartideDockerURL/phpmyadmin:5.1.1" "$dockerURL/phpmyadmin:5.1.1"
    docker push "$dockerURL/phpmyadmin:5.1.1"
    docker tag "$smartideDockerURL/mysql:8.0.29" "$dockerURL/mysql:8.0.29"
    docker push "$dockerURL/mysql:8.0.29"
    docker tag "$smartideDockerURL/busybox:1.29.3" "$dockerURL/busybox:1.29.3"
    docker push "$dockerURL/busybox:1.29.3"
    docker tag "$smartideDockerURL/redis:6.0.16" "$dockerURL/redis:6.0.16"
    docker push "$dockerURL/redis:6.0.16"
  fi

}

function get_smartide_tekton_manifests() {
  logger info "download smartide tekton manifests"
  if [[ ! -d "$BASE/manifests/smartide-tekton-deployment" ]];then
    mkdir -p "$BASE/manifests/smartide-tekton-deployment"
    tektonManifestsPath="$BASE/manifests/smartide-tekton-deployment"
    wget -P $tektonManifestsPath/pipeline/v0.32.0 \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/pipeline/v0.32.0/smartide-tekton-release.yaml
    wget -P $tektonManifestsPath/dashboard/v0.32.0 \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/dashboard/v0.32.0/smartide-tekton-dashboard-release.yaml
    wget -P $tektonManifestsPath/trigger/v0.18.0 \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/trigger/v0.18.0/smartide-release.yaml
    wget -P $tektonManifestsPath/trigger/v0.18.0 \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/trigger/v0.18.0/smartide-interceptor.yaml
    wget -P $tektonManifestsPath/smartide-pipeline/aliyun \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/smartide-pipeline/aliyun/trigger.yaml
    wget -P $tektonManifestsPath/smartide-pipeline/aliyun \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/smartide-pipeline/aliyun/trigger-template.yaml
    wget -P $tektonManifestsPath/smartide-pipeline/aliyun \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/smartide-pipeline/aliyun/trigger-binding.yaml
    wget -P $tektonManifestsPath/smartide-pipeline/aliyun \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/smartide-pipeline/aliyun/trigger-event-listener.yaml
    wget -P $tektonManifestsPath/smartide-pipeline/aliyun \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/smartide-pipeline/aliyun/task-smartide-cli-release.yaml
    sed -i "s/{smartideCliVer}/$smartideCliVer/g" $tektonManifestsPath/smartide-pipeline/aliyun/task-smartide-cli-release.yaml
    wget -P $tektonManifestsPath/smartide-pipeline/aliyun \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/smartide-pipeline/aliyun/pipeline-smartide-cli.yaml
    wget -P $tektonManifestsPath \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-tekton-deployment/smartide-tekton-deployment.sh
  else
    logger warn "smartide tekton manifests are already exists: [$BASE/manifests/smartide-tekton-deployment]"
  fi
}

function get_smartide_server_manifests() {
  logger info "download smartide server manifests"
  if [[ ! -d "$BASE/manifests/smartide-server-deployment" ]];then
    mkdir -p "$BASE/manifests/smartide-server-deployment/k8s"
    serverManifestsPath="$BASE/manifests/smartide-server-deployment"
    wget -P $serverManifestsPath/k8s/ \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-server-deployment/k8s/gva-server-configmap.yaml
    wget -P $serverManifestsPath/k8s/ \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-server-deployment/k8s/gva-server-deployment.yaml
    sed -i "s/{smartideServerVer}/$smartideServerVer/g" $serverManifestsPath/k8s/gva-server-deployment.yaml
    wget -P $serverManifestsPath/k8s/ \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-server-deployment/k8s/gva-web-configmap.yaml
    wget -P $serverManifestsPath/k8s/ \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-server-deployment/k8s/gva-web-deploymemt.yaml
    sed -i "s/{smartideServerVer}/$smartideServerVer/g" $serverManifestsPath/k8s/gva-web-deploymemt.yaml
    wget -P $serverManifestsPath/k8s/ \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-server-deployment/k8s/myadmin-deployment.yaml
    wget -P $serverManifestsPath/k8s/ \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-server-deployment/k8s/mysql-deployment.yaml
    wget -P $serverManifestsPath/k8s/ \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-server-deployment/k8s/redis-deployment.yaml
    wget -P $serverManifestsPath \
      https://raw.githubusercontent.com/SmartIDE/smartide-server-install/master/1-SmartIDE_Server_K8S/smartide-server-deployment/smartide-server-deployment.sh
  else
    logger warn "smartide server manifests are already exists: [$BASE/manifests/smartide-server-deployment]"
  fi
}

function get_registry() {
  if [[ ! -f "$imageDir/registry-2.tar" ]];then
    docker pull "registry:2" && \
    docker save -o "$imageDir/registry-2.tar" "registry:2"
  fi
}

function start_local_registry() {
  docker ps -a --format="{{ .Names }}"|grep registry > /dev/null 2>&1 && \
  { logger warn "registry is already running"; return 0; }

  if [[ ! -f "$imageDir/registry-2.tar" ]];then
    docker pull "registry:2" && \
    docker save -o "$imageDir/registry-2.tar" "registry:2"
  fi

  logger info "start local registry ..."
  docker load -i "$imageDir/registry-2.tar" > /dev/null
  mkdir -p /opt/kube/registry
  docker run -d \
        --name registry \
        --network host \
        --restart always \
        --volume /opt/kube/registry:/var/lib/registry \
        registry:2

  sed -i "/smartide.io.local/d" /etc/hosts
  echo "127.0.0.1  smartide.io.local" >> /etc/hosts
}

function build_all_manifests() {
  build_smartide_tekton_manifests && \
  build_smartide_server_manifests
}

function build_smartide_tekton_manifests() {
  logger info "build smartide tekton manifests"
}

function build_smartide_server_manifests() {
  logger info "build smartide server manifests"
  if [[ ! -d "$BASE/manifests/smartide-server-deployment" ]];then
    logger error "smartide server manifests are not exists"
  else
    serverManifestsPath="$BASE/manifests/smartide-server-deployment"
    ## 替换镜像地址
    sed -i "s#registry.cn-hangzhou.aliyuncs.com#$dockerRegistry#g" `grep registry.cn-hangzhou.aliyuncs.com -rl $serverManifestsPath`
    ## 替换参数 manifests/smartide-server-deployment/k8s/gva-server-configmap.yaml
    gvaServerConfigmap="$serverManifestsPath/k8s/gva-server-configmap.yaml"
    logger info "manifest: [$gvaServerConfigmap] building..."
    sed -i "s|^      api-host:.*$|      api-host: ${apiHost}|g" $gvaServerConfigmap
    sed -i "s|^      tekton-trigger-host:.*$|      tekton-trigger-host: ${tektonTriggerHost}|g" $gvaServerConfigmap
    sed -i "s|^      hybrid-download-url:.*$|      hybrid-download-url: ${hybridDownloadUrl}|g" $gvaServerConfigmap
    sed -i "s|^      template-git-url:.*$|      template-git-url: ${templateGitUrl}|g" $gvaServerConfigmap
    sed -i "s|^        assets-url:.*$|        assets-url: ${assetsUrl}|g" $gvaServerConfigmap
    sed -i "s|^        oemEnable:.*$|        oemEnable: ${oemEnable}|g" $gvaServerConfigmap
    sed -i "s|^        title:.*$|        title:: ${title}|g" $gvaServerConfigmap
    sed -i "s|^        doc-url:.*$|        doc-url: ${docUrl}|g" $gvaServerConfigmap
    sed -i "s|^        cliVersion:.*$|        cliVersion: ${cliVersion}|g" $gvaServerConfigmap
    ## 替换参数 manifests/smartide-server-deployment/k8s/gva-server-deployment.yaml
    gvaServerDeployment="$serverManifestsPath/k8s/gva-server-deployment.yaml"
    logger info "manifest: [$gvaServerDeployment] building..."
    sed -i "s|\$(Build.BuildId)|${smartideServerVer}|g" $gvaServerDeployment
    ## 替换参数 manifests/smartide-server-deployment/k8s/gva-web-configmap.yaml
    if [ "$webSSL" != "true" ];then
      gvaWebConfigmap="$serverManifestsPath/k8s/gva-web-configmap.yaml"
      logger info "manifest: [$gvaWebConfigmap] building SSL..."
      sed -i "s|        listen 443 ssl|        #listen 443 ssl|g" $gvaWebConfigmap
      sed -i "s|        ssl_certificate_key|        #ssl_certificate_key|g" $gvaWebConfigmap
      sed -i "s|        ssl_certificate|        #ssl_certificate|g" $gvaWebConfigmap
    fi
    ## 替换参数 manifests/smartide-server-deployment/k8s/gva-web-deploymemt.yaml
    gvaWebDeployment="$serverManifestsPath/k8s/gva-web-deploymemt.yaml"
    logger info "manifest: [$gvaWebDeployment] building..."
    sed -i "s|  type: LoadBalancer|  type: NodePort|g" $gvaWebDeployment
    sed -i '/loadBalancerIP/ d' $gvaWebDeployment
    sed -i "/      targetPort: 8080/a\      nodePort: 8080" $gvaWebDeployment
    sed -i "/      targetPort: 443/a\      nodePort: 8443" $gvaWebDeployment
    sed -i "s|\$(Build.BuildId)|${smartideServerVer}|g" $gvaWebDeployment
    if [ "$webSSL" != "true" ];then
      logger info "manifest: [$gvaWebDeployment] building SSL..."
      sed -i "s|            - mountPath: /etc/nginx/ssl|#            - mountPath: /etc/nginx/ssl|g" $gvaWebDeployment
      sed -i "s|              name: secret-volume|#            name: secret-volume|g" $gvaWebDeployment
      sed -i "s|        - name: secret-volume|#        - name: secret-volume|g" $gvaWebDeployment
      sed -i "s|          secret:|#          secret:|g" $gvaWebDeployment
      sed -i "s|            secretName: nginxsecret|#            secretName: nginxsecret|g" $gvaWebDeployment
    fi
    ## 替换参数 manifests/smartide-server-deployment/k8s/myadmin-deployment.yaml
    myadminDeployment="$serverManifestsPath/k8s/myadmin-deployment.yaml"
    logger info "manifest: [$myadminDeployment] building..."
    sed -i "s|  type: LoadBalancer|  type: NodePort|g" $myadminDeployment
    sed -i '/loadBalancerIP/ d' $myadminDeployment
    ## 替换参数 manifests/smartide-server-deployment/k8s/mysql-deployment.yaml
    mysqlDeployment="$serverManifestsPath/k8s/mysql-deployment.yaml"
    logger info "manifest: [$mysqlDeployment] building..."
    sed -i "s|\$(DBPassword)|${dbPassword}|g" $mysqlDeployment      
  fi
}

function deploy_all() {
  deploy_smartide_tekton && \
  deploy_smartide_server
}

function deploy_smartide_tekton() {
  logger info "deploy smartide tekton manifests"
  if [[ ! -d "$BASE/manifests/smartide-tekton-deployment" ]];then
    logger error "smartide tekton manifests are not exists"
  else
    tektonManifestsPath="$BASE/manifests/smartide-tekton-deployment"
    sed -i "s#easzlab.io.local:5000#$dockerRegistry#g" `grep easzlab.io.local:5000 -rl $tektonManifestsPath`
    kubectl apply -f $tektonManifestsPath/pipeline/v0.32.0/smartide-tekton-release.yaml
    kubectl apply -f $tektonManifestsPath/dashboard/v0.32.0/smartide-tekton-dashboard-release.yaml
    sleep 15
    kubectl apply -f $tektonManifestsPath/trigger/v0.18.0/smartide-release.yaml
    kubectl apply -f $tektonManifestsPath/trigger/v0.18.0/smartide-interceptor.yaml
    sleep 5
    kubectl apply -f $tektonManifestsPath/smartide-pipeline/aliyun/trigger.yaml
    kubectl apply -f $tektonManifestsPath/smartide-pipeline/aliyun/trigger-template.yaml
    kubectl apply -f $tektonManifestsPath/smartide-pipeline/aliyun/trigger-binding.yaml
    kubectl apply -f $tektonManifestsPath/smartide-pipeline/aliyun/trigger-event-listener.yaml
    sleep 5
    kubectl apply -f $tektonManifestsPath/smartide-pipeline/aliyun/task-smartide-cli-release.yaml
    kubectl apply -f $tektonManifestsPath/smartide-pipeline/aliyun/pipeline-smartide-cli.yaml
  fi
}

function deploy_smartide_server() {
  logger info "deploy smartide server manifests"
  if [[ ! -d "$BASE/manifests/smartide-server-deployment" ]];then
    logger error "smartide server manifests are not exists"
  else
    serverManifestsPath="$BASE/manifests/smartide-server-deployment"
    kubectl apply -f $serverManifestsPath/k8s/gva-server-configmap.yaml
    kubectl apply -f $serverManifestsPath/k8s/gva-server-deployment.yaml
    kubectl apply -f $serverManifestsPath/k8s/gva-web-configmap.yaml
    kubectl apply -f $serverManifestsPath/k8s/gva-web-deploymemt.yaml
    kubectl apply -f $serverManifestsPath/k8s/myadmin-deployment.yaml
    kubectl apply -f $serverManifestsPath/k8s/mysql-deployment.yaml
    kubectl apply -f $serverManifestsPath/k8s/redis-deployment.yaml
  fi
}

### Main Lines ##################################################
function main() {
  BASE="/etc/smartide"
  imageDir="$BASE/down"

  # check if use bash shell
  readlink /proc/$$/exe|grep -q "bash" || { logger error "you should use bash shell, not sh"; exit 1; }
  # check if use with root
  [[ "$EUID" -ne 0 ]] && { logger error "you should run this script as root"; exit 1; }
  
  [[ "$#" -eq 0 ]] && { usage >&2; exit 1; }
  
  ACTION=""
  while getopts "DKBR" OPTION; do
      case "$OPTION" in
        D)
          ACTION="download_all"
          ;;
        B)
          ACTION="build_all_manifests"
          ;;
        K)
          ACTION="deploy_all"
          ;;
        R)
          ACTION="start_local_registry"
          ;;        
        ?)
          usage
          exit 1
          ;;
      esac
  done
  
  [[ "$ACTION" == "" ]] && { logger error "illegal option"; usage; exit 1; }
  
  # excute cmd "$ACTION" 
  logger info "Action begin: $ACTION"
  ${ACTION} || { logger error "Action failed: $ACTION"; return 1; }
  logger info "Action successed: $ACTION"
}

main "$@"
